// Initialize Grid.js
    
new gridjs.Grid({
    columns: [
        { name: 'Item ID' },
        { name: 'Name' },
        { name: 'Description' },
        { name: 'Location' },
        { name: 'Category' },
        { name: 'Quality' },
        { name: 'Price' },
        { name: 'Quantity' },
        {
        name: 'Actions',
        formatter: (cell, row) => {
            const itemId = row.cells[0].data;  // Assuming item_id is in the first column
            const itemName = row.cells[1].data; // Assuming item_name is in the second column

            // Log to ensure the formatter is being triggered
            console.log('Rendering actions for:', itemId, itemName);

            // Create a div container for the buttons
            const container = document.createElement('div');
            
            // Create the "Edit" button
            const editButton = document.createElement('button');
            editButton.className = 'py-2 mb-4 px-4 border rounded-md text-white bg-blue-600';
            editButton.textContent = 'Edit';
            editButton.onclick = () => {
            alert(`Editing "${itemName}" with ID: ${itemId}`);
            // Replace with your edit logic
            };
            
            // Create the "Delete" button
            const deleteButton = document.createElement('button');
            deleteButton.className = 'py-2 mb-4 px-4 border rounded-md text-white bg-red-600 ml-2';
            deleteButton.textContent = 'Delete';
            deleteButton.onclick = () => {
            alert(`Deleting "${itemName}" with ID: ${itemId}`);
            // Replace with your delete logic
            };
            
            // Append buttons to the container
            container.appendChild(editButton);
            container.appendChild(deleteButton);

            return container;  // Return the div containing the buttons
        }
        }
    ],
    server: {
        url: 'admin/includes/fetchdata/itemsfetch.php',
        then: data => {
        // Log the data received to ensure it's correct
        console.log('Data received:', data);
        return data.data.map(item => [
            item.item_id,
            item.item_name,
            item.item_description,
            item.item_location,
            item.item_category,
            item.item_quality,
            item.item_price,
            item.item_quantity,
            null
        ]);
        }
    },
    pagination: {
        enabled: true,
        limit: 20
    },
    search: true,
    sort: true,
    resizable: true,
    fixedHeader: true,
    height: '500px',
    render: {
        html: true  // Ensure HTML is rendered correctly
    }