alertify.set('notifier','position', 'top-left');

    

    function initializeAddItemValidation() {
        const form = document.getElementById('addItem');
        const submitButton = form.querySelector('button[type="submit"]');
        // const imageInput = document.getElementById('item_image');
        const priceInput = document.getElementById('item_price');
        const quantityInput = document.getElementById('item_quantity');

        // Validate the file when it is uploaded
        imageInput.addEventListener('change', function () {
            validateFile();
        });

        // Price Validation
        priceInput.addEventListener('blur', validatePrice);
        priceInput.addEventListener('input', validatePrice);

        // Quantity Validation
        quantityInput.addEventListener('blur', validateQuantity);
        quantityInput.addEventListener('input', validateQuantity);

        // Re-check form validity dynamically
        document.querySelectorAll('#addItem input[required]').forEach(function (input) {
            input.addEventListener('input', checkFormValidity);
        });

        // Form submit event
        form.addEventListener('submit', function (e) {
            let errorCount = 0;

            // Check all required input fields
            const requiredFields = form.querySelectorAll('input[required]');
            requiredFields.forEach(function (field) {
                if (!field.value.trim()) {
                    field.classList.add('is-invalid');
                    alertify.error(`Please fill out the ${field.previousElementSibling.innerText} field.`);
                    errorCount++;
                } else {
                    field.classList.remove('is-invalid');
                }
            });

            // Validate file separately
            if (!validateFile()) {
                errorCount++;
            }

            // Prevent submission if there are errors
            if (errorCount > 0) {
                e.preventDefault();
                submitButton.disabled = true;
            } else {
                submitButton.disabled = false;
            }
        });

        // Helper functions
        function validateFile() {
            const file = imageInput.files[0];
            const allowedExtensions = ['image/jpeg', 'image/png'];
            const maxFileSize = 2 * 1024 * 1024; // 2 MB
            let isValid = true;

            if (!file) {
                imageInput.classList.add('is-invalid');
                alertify.error("Please select an image file.");
                isValid = false;
            } else if (!allowedExtensions.includes(file.type)) {
                imageInput.classList.add('is-invalid');
                alertify.error("Invalid file type. Only JPG or PNG files are allowed.");
                isValid = false;
            } else if (file.size > maxFileSize) {
                imageInput.classList.add('is-invalid');
                alertify.error("File is too large. Maximum allowed size is 2 MB.");
                isValid = false;
            } else {
                imageInput.classList.remove('is-invalid');
                alertify.success("File is valid.");
            }

            submitButton.disabled = !isValid;
            return isValid;
        }

        function validatePrice() {
            const value = priceInput.value.trim();
            const decimalRegex = /^\d+(\.\d{1,2})?$/;

            if (!decimalRegex.test(value)) {
                priceInput.classList.add('is-invalid');
                alertify.error("Invalid price. Enter a valid decimal number.");
                submitButton.disabled = true;
            } else {
                priceInput.classList.remove('is-invalid');
                checkFormValidity();
            }
        }

        function validateQuantity() {
            const value = quantityInput.value.trim();
            const integerRegex = /^\d+$/;

            if (!integerRegex.test(value) || parseInt(value) <= 0) {
                quantityInput.classList.add('is-invalid');
                alertify.error("Invalid quantity. Enter a positive integer.");
                submitButton.disabled = true;
            } else {
                quantityInput.classList.remove('is-invalid');
                checkFormValidity();
            }
        }

        function checkFormValidity() {
            const allValid = Array.from(form.querySelectorAll('input[required]')).every(
                (field) => field.value.trim() && !field.classList.contains('is-invalid')
            );

            submitButton.disabled = !allValid;
        }
    }

    // Initialize validation
    initializeAddItemValidation();